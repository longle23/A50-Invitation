const fs = require('fs');
const path = require('path');
const csv = require('csv-parser');
const QRCode = require('qrcode');

// C·∫•u h√¨nh
const CSV_FILE = './guest-list.csv';
const OUTPUT_DIR = './output/qrs';
const BASE_URL = 'http://localhost:3000'; // URL c·ªßa web server

/**
 * T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a t·ªìn t·∫°i
 */
function ensureOutputDir() {
    if (!fs.existsSync(OUTPUT_DIR)) {
        fs.mkdirSync(OUTPUT_DIR, { recursive: true });
        console.log(`‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c: ${OUTPUT_DIR}`);
    }
}

/**
 * T·∫°o QR code cho m·ªôt kh√°ch m·ªùi
 * @param {Object} guest - Th√¥ng tin kh√°ch m·ªùi {id, name, role, email}
 * @returns {Promise<string>} - ƒê∆∞·ªùng d·∫´n file QR ƒë√£ t·∫°o
 */
async function generateQRForGuest(guest) {
    try {
        // T·∫°o URL check-in cho kh√°ch n√†y
        const checkinUrl = `${BASE_URL}/checkin/${guest.id}`;
        
        // T·∫°o QR code
        const qrCodeDataURL = await QRCode.toDataURL(checkinUrl, {
            width: 300,
            margin: 2,
            color: {
                dark: '#000000',
                light: '#FFFFFF'
            }
        });

        // T·∫°o t√™n file an to√†n (lo·∫°i b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát)
        const safeName = guest.name.replace(/[^a-zA-Z0-9\s]/g, '').replace(/\s+/g, '_');
        const fileName = `${guest.id}_${safeName}.png`;
        const filePath = path.join(OUTPUT_DIR, fileName);

        // Chuy·ªÉn ƒë·ªïi data URL th√†nh buffer v√† l∆∞u file
        const base64Data = qrCodeDataURL.replace(/^data:image\/png;base64,/, '');
        const buffer = Buffer.from(base64Data, 'base64');
        
        fs.writeFileSync(filePath, buffer);
        
        console.log(`‚úÖ ƒê√£ t·∫°o QR cho: ${guest.name} (${guest.id})`);
        return filePath;
        
    } catch (error) {
        console.error(`‚ùå L·ªói khi t·∫°o QR cho ${guest.name}:`, error.message);
        throw error;
    }
}

/**
 * ƒê·ªçc file CSV v√† t·∫°o QR codes cho t·∫•t c·∫£ kh√°ch m·ªùi
 */
async function generateAllQRCodes() {
    console.log('üöÄ B·∫Øt ƒë·∫ßu t·∫°o QR codes cho kh√°ch m·ªùi...\n');
    
    // ƒê·∫£m b·∫£o th∆∞ m·ª•c output t·ªìn t·∫°i
    ensureOutputDir();
    
    const guests = [];
    let successCount = 0;
    let errorCount = 0;

    return new Promise((resolve, reject) => {
        fs.createReadStream(CSV_FILE)
            .pipe(csv())
            .on('data', (row) => {
                // Parse d·ªØ li·ªáu t·ª´ CSV
                const guest = {
                    id: row.id || Object.values(row)[0],
                    name: row.name || Object.values(row)[1], 
                    role: row.role || Object.values(row)[2],
                    email: row.email || Object.values(row)[3]
                };
                guests.push(guest);
            })
            .on('end', async () => {
                console.log(`üìã ƒê√£ ƒë·ªçc ${guests.length} kh√°ch m·ªùi t·ª´ file CSV\n`);
                
                // T·∫°o QR code cho t·ª´ng kh√°ch
                for (const guest of guests) {
                    try {
                        await generateQRForGuest(guest);
                        successCount++;
                    } catch (error) {
                        errorCount++;
                        console.error(`‚ùå Kh√¥ng th·ªÉ t·∫°o QR cho ${guest.name}:`, error.message);
                    }
                }
                
                console.log('\nüìä K·∫æT QU·∫¢:');
                console.log(`‚úÖ Th√†nh c√¥ng: ${successCount} QR codes`);
                console.log(`‚ùå L·ªói: ${errorCount} QR codes`);
                console.log(`üìÅ QR codes ƒë∆∞·ª£c l∆∞u t·∫°i: ${path.resolve(OUTPUT_DIR)}`);
                
                resolve({ successCount, errorCount, totalGuests: guests.length });
            })
            .on('error', (error) => {
                console.error('‚ùå L·ªói khi ƒë·ªçc file CSV:', error.message);
                reject(error);
            });
    });
}

/**
 * T·∫°o file t·ªïng h·ª£p danh s√°ch kh√°ch m·ªùi v·ªõi URL check-in
 */
async function generateGuestList() {
    const guests = [];
    
    return new Promise((resolve, reject) => {
        fs.createReadStream(CSV_FILE)
            .pipe(csv())
            .on('data', (row) => {
                const guest = {
                    id: row.id || Object.values(row)[0],
                    name: row.name || Object.values(row)[1], 
                    role: row.role || Object.values(row)[2],
                    email: row.email || Object.values(row)[3],
                    checkinUrl: `${BASE_URL}/checkin/${row.id || Object.values(row)[0]}`
                };
                guests.push(guest);
            })
            .on('end', () => {
                const guestListPath = path.join(OUTPUT_DIR, 'guest-list-with-urls.json');
                fs.writeFileSync(guestListPath, JSON.stringify(guests, null, 2));
                console.log(`üìã ƒê√£ t·∫°o file danh s√°ch kh√°ch: ${guestListPath}`);
                resolve(guests);
            })
            .on('error', reject);
    });
}

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
    (async () => {
        try {
            await generateAllQRCodes();
            await generateGuestList();
            console.log('\nüéâ Ho√†n th√†nh t·∫°o QR codes!');
        } catch (error) {
            console.error('‚ùå L·ªói trong qu√° tr√¨nh t·∫°o QR codes:', error.message);
            process.exit(1);
        }
    })();
}

module.exports = {
    generateQRForGuest,
    generateAllQRCodes,
    generateGuestList
};
